// Code generated by go-bindata.
// sources:
// view/cart.html
// view/catalog.html
// view/index.html
// view/purchase.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewCartHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x53\x5d\x6b\x13\x41\x14\x7d\xef\xaf\x58\xf6\x49\xa1\xec\xb4\xf8\x50\x90\xdd\x15\x1f\x44\x04\xd1\xa2\xfd\x03\x93\xd9\xc9\xee\xe0\x7c\x84\x99\x49\x25\x86\x80\x9b\x62\x8c\x1f\x05\xa5\xf8\x20\xbe\xd8\x07\x3f\x20\xe8\x8b\x2f\x45\x43\xff\xcc\x64\x4b\xfa\x2f\xbc\xbb\x93\x26\x04\x11\xaa\x0f\x81\xb9\x87\xdc\x73\xcf\x3d\xe7\x6e\x5c\x58\xc1\xd3\x8d\xb8\xa0\x38\x4b\x37\x82\x20\xb6\xcc\x72\x9a\x12\xac\x6d\x8c\xfc\xbb\x46\x39\x93\x8f\x02\x4d\x79\x12\x1a\xdb\xe3\xd4\x14\x94\xda\x30\x28\x34\x6d\x27\x21\x42\x6d\x25\xad\x89\x72\xa5\x72\x4e\x71\x87\x99\x88\x28\x81\x88\x31\x37\xda\x58\x30\xde\x4b\x1e\xa8\x96\xb2\xea\xfa\xb5\xad\xad\x4d\xf8\x31\x8b\x39\x23\x9b\x3b\x50\xed\x5c\x54\xe1\x25\xa6\x90\x4c\x46\x1a\x3f\xce\x99\x6d\xf8\x25\x25\x8a\x63\x83\xa4\xd2\x02\x28\x9e\xd0\x08\x26\x22\x81\x8d\xa5\x7a\x1d\xfc\x0f\x72\x90\xcd\x59\xae\xf1\xda\xcb\x53\x67\xcc\xd8\x15\x1a\x09\x26\x17\x33\x62\xe4\x4d\x8c\x5b\x2a\xeb\x35\x23\x33\xb6\x1f\x10\xd0\x68\x92\x90\x80\x45\x98\x49\xaa\xbd\x98\x62\x3b\x75\xc3\x89\x3b\x98\xba\x83\xb1\x2b\xbf\xcf\x4e\xbe\xcd\x7f\x4e\x80\x60\xdb\x67\x80\x5b\xde\xf7\xfa\xad\xd3\xd8\x16\x69\xf5\xe6\xb0\x7a\x71\x08\x91\x14\x4d\x39\x3b\x3d\x3e\xfb\x38\xbd\x52\x8d\x46\x57\x3d\x86\xe0\x7f\xfd\x3e\x6b\x07\x92\x06\xd1\x4d\xa1\xba\xd2\x06\x5b\x83\x41\xc3\xd1\xef\x6b\x2c\x73\xc0\xef\x58\x2a\xee\x82\xfc\xc1\xc0\xd3\x66\xd0\x12\xdd\xc3\x82\x02\x80\xa0\x5a\x20\xbb\x9a\x91\x25\xe4\x89\xa9\xcc\x16\x64\x2b\x41\xe3\xf9\xd7\xf1\xf9\xf3\xb7\xe7\xc7\x17\xb2\x9a\xe6\x3d\x05\x81\xfe\xc1\x50\x6f\x85\x96\x6b\xc5\x6d\x88\x27\xc0\xc4\x32\x25\xc1\xfc\x4e\x57\x93\x02\x1b\x1a\x06\x82\xda\x42\x65\x49\xb8\x7b\xff\xe1\x5e\xb8\x30\xa0\xd5\xb5\x56\xc9\xc0\xf6\x3a\x14\xa2\xeb\xb6\x04\x83\xd8\x24\x88\x4e\xc2\x65\x63\x3a\xff\x31\xad\x9e\x7d\x72\xe5\x7b\x37\x7c\x15\x23\xdf\xe2\x87\xd6\xa3\xea\x05\xb8\xa1\x6b\x1b\x64\x69\xf5\x6e\x54\x1d\x95\xae\x7c\xed\xca\xa1\x1b\xbe\x74\xe5\xa9\x2b\x3f\xb8\xe1\xd1\xd2\x8a\x4b\xca\x27\x18\x36\x56\xf9\x4a\xfd\xed\x5b\xff\x26\xde\x0b\x99\x9d\x3c\x9d\x7f\xfe\xe2\xca\xc9\xd9\xf8\xd7\x5f\xb7\x58\xc4\x10\xc3\x15\xee\xd7\x17\xe7\x4f\x0d\x0e\xa7\xf9\x8a\x7f\x07\x00\x00\xff\xff\xb4\x31\xd5\x39\xcd\x03\x00\x00")

func viewCartHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewCartHtml,
		"view/cart.html",
	)
}

func viewCartHtml() (*asset, error) {
	bytes, err := viewCartHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/cart.html", size: 973, mode: os.FileMode(420), modTime: time.Unix(1499599798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewCatalogHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x53\xcd\x6a\x14\x41\x10\xbe\xe7\x29\x9a\x26\x07\x85\x30\x9d\xe0\x21\x10\x66\xc6\x8b\x97\x1c\xd4\xa0\xbe\x40\x4f\x77\xed\x4c\x93\xfe\x59\xba\x7b\x23\xe3\x32\x60\x0c\x2c\x2a\x04\x04\xf1\x1e\x2f\x7a\xc8\x0b\x78\x88\xfa\x30\x9b\x91\x3c\x86\x35\xd3\xd9\xc4\x85\x08\xe2\x61\xa1\xbe\xda\xae\xef\xfb\xaa\x3e\x26\x6f\xa2\xd1\xe5\x46\xde\x00\x97\xe5\x06\x21\x79\x54\x51\x43\x29\x78\xe4\xda\xd5\x39\x4b\x70\xf8\x43\x2b\x7b\x48\x3c\xe8\x82\x86\xd8\x6a\x08\x0d\x40\xa4\xa4\xf1\x30\x29\x28\x63\x13\x67\x63\xc8\x6a\xe7\x6a\x0d\x7c\xaa\x42\x26\x9c\x61\x22\x84\x87\x13\x6e\x94\x6e\x8b\x67\xae\x72\xd1\xed\x3d\xd8\xde\xde\xc2\x9f\x42\x76\x25\xb6\x76\x11\xed\xae\x10\xfd\x07\x15\x21\x6d\xe6\xf9\xcb\x5a\xc5\x91\xdf\x82\x70\x9a\x07\x66\x9d\x37\x48\xf1\x0a\x32\x54\x64\x86\x87\x08\x7e\xbd\xf9\x1f\xe4\x68\x5b\xab\xda\xf3\xb5\x2a\x51\x4b\x15\xe2\x6d\x37\x33\xca\x5e\x6b\xe4\x2c\xdd\x31\xaf\x9c\x6c\x47\x49\xa9\x8e\x88\x40\x8f\xa1\xa0\x02\x4f\xc4\x95\x05\x9f\xcc\x34\x3b\x65\xff\x69\xd1\x7f\x3c\xbe\xfc\xf6\xfa\xea\xcb\x57\x1c\xdd\x19\xfb\x13\xf4\x4d\xb8\x88\xca\x59\x74\x25\xb8\x47\x8b\x06\x62\xe3\x64\x41\x0f\x9e\x3e\x7f\x31\x4e\x0f\x41\xf1\x2a\x25\x93\x90\x5f\x95\x03\x68\xca\xfe\xc3\x69\xff\xee\x14\xf3\x6b\xca\x01\x5e\xfe\xf8\xfc\xeb\xec\xe2\x5e\xbf\x58\xdc\xbf\xe9\x8d\xc5\x6a\x9e\xdd\x12\xcc\xe7\x9e\xdb\x1a\xc8\xe6\x21\xb4\x5b\x64\xf3\x88\xeb\x19\x90\xbd\x82\x64\xfb\x11\xcc\x63\x3e\xed\xba\xbb\x45\x65\x39\x9f\xa7\xd7\xd9\x13\x6e\xa0\xeb\x90\x54\xfe\xe5\xc1\x81\x57\xe2\xce\x17\x79\x35\x8b\xd1\x59\x12\xdb\x29\x60\x4c\xb3\xca\x28\xdc\xdf\x22\x5f\x41\x15\xea\x53\x32\x12\x14\xf4\x86\x6a\xff\x51\xd7\xd1\x72\xf9\xe6\x7c\x79\x72\xb1\x3c\x79\xbb\x3c\x3e\xbf\xfa\xf9\xbd\x7f\x7f\x96\xb3\x44\x55\xfe\x29\xb2\xbe\x27\x58\x79\xbd\x0c\xf6\x57\xe7\xcc\xd9\x90\x40\xaa\x30\xbd\x21\xd4\x94\x26\x26\x34\x7e\x2b\xbf\x03\x00\x00\xff\xff\x6e\x59\x50\x96\x33\x03\x00\x00")

func viewCatalogHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewCatalogHtml,
		"view/catalog.html",
	)
}

func viewCatalogHtml() (*asset, error) {
	bytes, err := viewCatalogHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/catalog.html", size: 819, mode: os.FileMode(420), modTime: time.Unix(1499566085, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x41\x4a\x3b\x31\x14\xc6\xf7\x3d\xc5\x90\x75\x99\xb4\xfc\x17\x85\x3f\x99\x78\x07\x6f\x90\x66\x5e\x67\x1e\x66\x12\x49\x62\xb5\xae\x6c\x07\xc4\xbd\x78\x05\x05\x8b\xba\x70\x53\xc4\xdb\xa4\x85\x1e\xc3\x74\x62\xd1\x82\x0b\x71\x11\x92\xf7\x91\xf7\x7d\xbf\x3c\xc2\x6a\xdf\x28\xde\x63\x35\x88\x92\xf7\xb2\x8c\x79\xf4\x0a\x38\xea\x12\x2e\x18\x4d\xc5\x4e\x56\xa8\x4f\x32\x0b\xaa\x20\xce\xcf\x14\xb8\x1a\xc0\x93\xac\xb6\x30\x29\x08\xa5\x13\xa3\xbd\xcb\x2b\x63\x2a\x05\xe2\x14\x5d\x2e\x4d\x43\xa5\x73\x47\x13\xd1\xa0\x9a\x15\xc7\x66\x6c\xbc\xf9\xff\x6f\x30\xe8\xc7\x85\x5e\x28\x94\xfd\x51\xac\x46\xfb\x8a\xfc\x22\x45\x96\x3a\xb7\xe2\xbc\x42\xdf\xf9\x6b\x90\x46\x09\x47\xb5\xb1\x4d\xb4\xb8\x84\x3c\x26\xd2\x46\x38\x0f\xf6\x50\xfc\x83\x79\xc4\x56\x58\x59\x71\x70\x4a\xd6\x25\x3a\xff\xa5\xe6\x0d\xea\xcf\x0c\x46\xd3\x14\xd9\xd8\x94\xb3\x2e\xb2\xc4\x69\x26\x23\xa3\x2b\x88\x8c\x23\x12\xa8\xc1\x26\x98\x7a\xc8\x43\xfb\x18\xda\xd7\xb0\x78\x89\x7d\xc3\x4e\x3c\x53\xbb\xad\x43\xe5\x4c\xec\xd1\xa4\x88\x13\x32\x15\xe1\x9b\xbb\xeb\xcd\xed\x7c\xbd\xba\xda\xde\x3f\x30\x2a\x38\xa3\xf1\xde\x8f\x0d\xd6\x13\x1e\x16\xcb\xd0\xbe\x87\xf6\x26\xcc\x9f\xd7\xab\xa7\xed\xdb\xf2\x7b\x0f\xa3\x29\x8c\xc5\xe7\x4c\x77\xe8\x89\x39\xa2\x74\xff\xe1\x23\x00\x00\xff\xff\xa9\x0b\xb3\xc1\x17\x02\x00\x00")

func viewIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewIndexHtml,
		"view/index.html",
	)
}

func viewIndexHtml() (*asset, error) {
	bytes, err := viewIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/index.html", size: 535, mode: os.FileMode(420), modTime: time.Unix(1499474385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewPurchaseHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\xcf\x4a\x3b\x31\x10\xc7\xef\x7d\x8a\x65\xcf\x65\xd3\xf2\x3b\x14\x7e\x64\xe3\x3b\x88\x2f\x30\xcd\x4e\x77\x07\xb3\x49\x49\xd2\x4a\xbd\xad\xa0\x08\xf6\xee\xd1\x93\x27\xc1\x8b\x37\x15\x5f\x66\xad\xf8\x18\x66\x13\x8b\xf4\x26\x1e\xf2\x67\x26\x33\xdf\xef\x87\x09\x6f\x7c\xab\xc4\x88\x37\x08\x95\x18\x65\x19\xf7\xe4\x15\x8a\xe5\xca\xca\x06\x1c\x72\x96\xe2\xe1\x45\x91\x3e\xcd\x2c\xaa\x32\x77\x7e\xa3\xd0\x35\x88\x3e\xcf\x1a\x8b\x8b\x32\x67\x6c\x61\xb4\x77\x45\x6d\x4c\xad\x10\x96\xe4\x0a\x69\x5a\x26\x9d\x3b\x5a\x40\x4b\x6a\x53\x1e\x9b\xb9\xf1\xe6\xff\xbf\xc9\x64\x1c\x16\x79\x50\x24\xc7\xb3\x10\xcd\xf6\x51\xfe\x0b\x17\x59\xe9\xc2\xc2\x59\x4d\x3e\xea\x6b\x94\x46\x81\x63\xda\xd8\x36\x48\x9c\x63\x11\x1c\x59\x0b\xce\xa3\x3d\x4c\xfe\x41\x3c\x60\x2b\xaa\x2d\x1c\xdc\x92\x74\x45\xce\xff\x64\x8b\x96\xf4\xb7\x07\x67\x69\x90\x7c\x6e\xaa\x4d\xb4\xac\x68\x9d\xc9\xc0\xe8\xca\x5c\x86\x11\x01\x69\xb4\x09\xa6\x99\x8a\xcf\xa7\xd7\xdd\xe5\x7d\xdf\x6d\x77\x8f\xdb\xf7\xe7\xab\xbe\xbb\xed\xbb\xb7\xb8\xdf\x05\xa5\x69\x2c\x5b\xa9\xe1\x88\xf0\x82\xc3\x1e\x36\x17\x27\x66\xd9\x77\x0f\x1f\xd7\x2f\xfd\xc5\x0d\x67\x20\x38\x0b\x05\x43\x03\x4b\x1d\x3c\x50\xae\x07\xa2\x84\x12\xf4\xe2\x4f\x7f\x05\x00\x00\xff\xff\xcb\xd5\xfc\xa0\xf1\x01\x00\x00")

func viewPurchaseHtmlBytes() ([]byte, error) {
	return bindataRead(
		_viewPurchaseHtml,
		"view/purchase.html",
	)
}

func viewPurchaseHtml() (*asset, error) {
	bytes, err := viewPurchaseHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "view/purchase.html", size: 497, mode: os.FileMode(420), modTime: time.Unix(1499474397, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"view/cart.html": viewCartHtml,
	"view/catalog.html": viewCatalogHtml,
	"view/index.html": viewIndexHtml,
	"view/purchase.html": viewPurchaseHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"view": &bintree{nil, map[string]*bintree{
		"cart.html": &bintree{viewCartHtml, map[string]*bintree{}},
		"catalog.html": &bintree{viewCatalogHtml, map[string]*bintree{}},
		"index.html": &bintree{viewIndexHtml, map[string]*bintree{}},
		"purchase.html": &bintree{viewPurchaseHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

